/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.C2onsole;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.*;
import java.util.Arrays;

@SuppressWarnings("serial")
public class Robot 
{
  	

	public static final int NORTH = 0;
	public static final int SOUTH = 1;
	public static final int EAST = 2;
	public static final int WEST = 3;
	
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
	Map<String, ArrayList<String>> Parametros = new HashMap<>();
	
	//Guarda todas las variables creadas
	Map<String, Integer> Variables = new HashMap<>();

	//Guarda todas los proceduress creadas por el usuario
    Map<String, List<Instrucciones>> procedures = new HashMap<>();
    
	// Guardar el codigo que se va a ejecutar
    ArrayList <Instrucciones> code = new ArrayList <Instrucciones> () ;


    //revisar que la variable este bien definida
    public int revisarVar(String variable) {
	  int var;
	  if (Variables.containsKey(variable)) {
	    var = Variables.get(variable);
	    }
	    
	  else { 
		  try {
		    var = Integer.parseInt(variable);
		    }
		  catch (NumberFormatException ee) 
			{throw new Error("\nThe value: "+variable+" needs to be a Inetger");}
	  }
	  return var;
	}
	

	
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
  		//DEFINICIONES
			< DEFVAR: "defVar" >
        | < DEFPROC: "defProc" >
		// Comandos simples
        | < JUMP: "jump">
  		| < TURN: "turn" >
  		| < GOTO: "goto" >
  		| < NOP: "nop" >
  		| < FACE: "face" >
  		| < WITH: "with" >
  		| < OFTYPE: "ofType" >
  		| < TOTHE: "toThe" >
  		| < INDIR: "inDir" >
  		
  		
  		//Direcciones
  		| < CARDINALDIR: "north" | "south" | "west" | "east" >
        | < DIRECTION: "right" | "left"|"around" >
        | < DIRECTIONCOMP: "right" | "left"|"front" | "back" >
        // Estructuras
  		| < IF: "if" >
  		| < ELSE: "else" >
  		| < WHILE: "while" >
  		| < REPEAT: "repeat" >
  		| < EQUALS: ":=">
  		| < FOR: "for" >
  		| < DO: "do" >
  		| < THEN: "then" >
		//Condiciones
		| < FACING: "facing" >
		| < CANPUT: "canPut" >
		| < CANPICK: "canPick" >
		| < CANMOVE: "canMove" >
		| < CANJUMMP: "canJump" >
		| < NOT: "not" >
		
  		
  		//Comandos Viejos
		| <MOV:  "Mov">
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >		

}

TOKEN:
{
			<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
			<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
		| < NAME: ( <LETTER> ( <LETTER > | < NUM > )* ) >
        | < #LETTER: ["A"-"Z"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	