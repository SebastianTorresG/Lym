/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
	
	public static final int NORTH = 0;
    public static final int SOUTH = 1;
    public static final int EAST = 2;
    public static final int WEST = 3;


    Map<String, ArrayList<String>> Parametros = new HashMap<>();
    Map<String, Integer> Variables = new HashMap<>();
    Map<String, List<Instrucciones>> procedures = new HashMap<>();
    ArrayList<Instrucciones> code = new ArrayList<>();

    public int revisarVar(String variable) {
        if (Variables.containsKey(variable)) {
            return Variables.get(variable);
        } else {
            try {
                return Integer.parseInt(variable);
            } catch (NumberFormatException e) {
                throw new Error("The value " + variable + " must be an Integer.");
            }
        }
    }

    private class Instrucciones {
        String tipo;
        String argx = "0";
        String argy = "0";
        String dir = "";

        public Instrucciones(String tipo) { this.tipo = tipo; }
        public Instrucciones(String tipo, String argx) { this.tipo = tipo; this.argx = argx; }
        public Instrucciones(String tipo, String argx, String dir) { this.tipo = tipo; this.argx = argx; this.dir = dir; }
        public Instrucciones(String tipo, String argx, String argy, String dir) {
            this.tipo = tipo; this.argx = argx; this.argy = argy; this.dir = dir;
        }

        public void setAtributos(String viejo, String nuevo) {
            if (argx.equals(viejo)) { this.argx = nuevo; }
            if (argy.equals(viejo)) { this.argy = nuevo; }
            if (dir.equals(viejo)) { this.dir = nuevo; }
        }

        public void execute() throws Error {
            int x = revisarVar(argx);
            int y = revisarVar(argy);
            int facing = world.getFacing();
            int[] ind;
            switch (tipo) {
                case "jump": world.setPostion(x, y); break;
                case "walk": direction(); world.moveForward(x, false); if (argy.equals("-1")) { look(facing); } break;
                case "leap": direction(); world.moveForward(x, true); if (argy.equals("-1")) { look(facing); } break;
                case "turn": direction(); break;
                case "turnto": direction(); break;
                case "drop": world.putChips(x); break;
                case "get": world.pickChips(x); break;
                case "grab": world.grabBalloons(x); break;
                case "letgo": world.putBalloons(x); break;
                case "pop": world.popBalloons(x); break;
                case "=": Variables.put(dir, x); break;
                case "while": ind = indices("while", "endwhile"); whiles(code.subList(ind[0], ind[1]+1)); break;
                case "if": ind = indices("if", "endif"); ifs(code.subList(ind[0], ind[1]+1)); break;
                case "repeat": ind = indices("repeat", "endrepeat"); repeats(code.subList(ind[0], ind[1]+1)); break;
            }
        }

        private void direction() throws Error {
            switch (dir) {
                case "#right": world.turnRight(); argy = "-1"; break;
                case "#left": world.turnRight(); world.turnRight(); world.turnRight(); argy = "-1"; break;
                case "#around": case "#back": world.turnRight(); world.turnRight(); argy = "-1"; break;
                case "#north": look(NORTH); break;
                case "#south": look(SOUTH); break;
                case "#west": look(WEST); break;
                case "#east": look(EAST); break;
            }
        }

        private void look(int direccion) {
            int facing = world.getFacing();
            while (facing != direccion) {
                world.turnRight();
                facing = world.getFacing();
            }
        }

        private int[] indices(String inicio, String fin) {
            int[] resp = {0, 0};
            while (code.get(resp[0]) != this) resp[0]++;
            int cont = 0;
            for (resp[1] = resp[0] + 1; resp[1] < code.size(); resp[1]++) {
                String tipo = code.get(resp[1]).tipo;
                if (tipo.equals(inicio)) cont++;
                else if (tipo.equals(fin)) {
                    if (cont == 0) break;
                    cont--;
                }
            }
            return resp;
        }

        private void whiles(List<Instrucciones> subcode) {
            int i = 0;
            while (!subcode.get(i).tipo.equals("condicional")) i++;
            int j = i + 1;
            while (subcode.get(0).condicionales()) {
                while (!subcode.get(j).tipo.equals("endwhile")) subcode.get(j++).execute();
                j = i + 1;
            }
            subcode.subList(0, j+1).clear();
        }

        private void ifs(List<Instrucciones> subcode) {
            int i = 0;
            while (!subcode.get(i).tipo.equals("condicional")) i++;
            if (subcode.get(0).condicionales()) {
                while (!subcode.get(i).tipo.equals("else")) subcode.get(i++).execute();
                while (!subcode.get(i).tipo.equals("endif")) i++;
            } else {
                while (!subcode.get(i).tipo.equals("else")) i++;
                while (!subcode.get(i).tipo.equals("endif")) subcode.get(i++).execute();
            }
            subcode.subList(0, i+1).clear();
        }

        private void repeats(List<Instrucciones> subcode) {
            int i = 0;
            for (int j = 0; j < revisarVar(argx); j++) {
                while (!subcode.get(i).tipo.equals("endrepeat")) subcode.get(i++).execute();
            }
            subcode.subList(0, i+1).clear();
        }

        public boolean condicionales() {
            int i = encontrar();
            boolean r = false;
            switch (tipo) {
                case "facing": r = world.getFacing() == orientacion(); break;
                case "can": r = can(code.get(i++).tipo); break;
                case "not": r = !code.get(i++).condicionales(); break;
            }
            return r;
        }

        private int orientacion() {
            switch (dir) {
                case "#north": return NORTH;
                case "#south": return SOUTH;
                case "#west": return WEST;
                case "#east": return EAST;
            }
            return -1;
        }

        private boolean can(String t) {
            boolean r = false;
            int x = revisarVar(argx);
            int y = revisarVar(argy);
            Point p = world.getPosition();
            switch (t) {
                case "jump": r = !world.isBlocked(new Point(x, y)); break;
                case "walk": case "leap": r = !world.blockedInRange(p.x, p.y, x, orientacion()); break;
                case "turn": case "turnto": r = true; break;
                case "drop": r = x <= world.getMyChips(); break;
                case "get": r = world.chipExists() && x <= world.chipsToPick(); break;
                case "grab": r = x <= world.countBalloons(); break;
                case "letgo": r = x <= world.getMyBalloons(); break;
            }
            return r;
        }

        private int encontrar() {
            int i = 0;
            while (code.get(i) != this) i++;
            return i;
        }
    }

    public void ejecutar() throws Error {
        for (Instrucciones i : code) {
            i.execute();
        }
    }
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
      < DEFVAR: "defVar" >
    | < DEFPROC: "defProc" >
    | < JUMP: "jump" >
    | < MOVE: "move" >
    | < TURN: "turn" >
    | < FACE: "face" >
    | < PUT: "put" >
    | < PICK: "pick" >
    | < GOTO: "goto" >
    | < NOP: "nop" >
    | < WITH: "with" >
    | < OFTYPE: "ofType" >
    | < TOTHE: "toThe" >
    | < INDIR: "inDir" >
    | < ASSIGN: ":=" >
    | < IF: "if" >
    | < THEN: "then" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < DO: "do" >
    | < FOR: "for" >
    | < REPEAT: "repeat" >
    | < PIPE: "|" >
}

TOKEN :
{
      < ORIENTATION: "#" ( "north" | "south" | "east" | "west" ) >
    | < DIRECTION: "#" ( "right" | "left" | "around" ) >
    | < DIRECTIONCOMP: "#" ( "front" | "back" | "left" | "right" ) >
}

TOKEN :
{
      < TYPE: "#" ( "chips" | "balloons" ) >
}

TOKEN :
{
      < FACING: "facing" >
    | < CANPUT: "canPut" >
    | < CANPICK: "canPick" >
    | < CANMOVE: "canMove" >
    | < CANJUMP: "canJump" >
    | < NOT: "not" >
}

TOKEN :
{
      < NUM: (<DIGIT>)+ >
    | < ID: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < #DIGIT: ["0"-"9"] >
    | < #LETTER: ["a"-"z", "A"-"Z"] >
}

TOKEN :
{
      < COMMENT: "#" (~["\n", "\r"])* >
    | < NEWLINE: ("\r" | "\n" | "\r\n")+ >
    | < SPACE: (" " | "\t")+ >
}

SKIP : { " " | "\t" | "\n" | "\r" }
SPECIAL_TOKEN : { < COMMENT > }



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
    { int x, y; salida = new String(); }
    {
        (
            Instruction()
            {
                try { Thread.sleep(900); } catch (InterruptedException e) { System.err.format("IOException: %s%n", e); }
                sistema.printOutput(salida);
                return true;
            }
        )+
        | <EOF> { return false; }
    }

    void Instruction() : {}
    {
        JumpInstr() |
        MoveInstr() |
        TurnInstr() |
        FaceInstr() |
        PutInstr() |
        PickInstr() |
        PopInstr() |
        GotoInstr() |
        AssignInstr() |
        NopInstr() |
        IfInstr() |
        WhileInstr() |
        RepeatInstr() |
        ProcedureDecl() |
        ProcedureCallAlt()
    }

    void ProcedureCallAlt() : { Token name; List<String> args = new ArrayList<>(); Token p; }
	{
	    <PIPE>
	    name=<ID>
	    ( p=Param() { args.add(p.image); } )*
	    <PIPE>
	    {
	        List<Instrucciones> cuerpo = procedures.get(name.image);
	        if (cuerpo != null) {
	            for (Instrucciones inst : cuerpo) {
	                Instrucciones copia = new Instrucciones(inst.tipo, inst.argx, inst.argy, inst.dir);
	                for (int i = 0; i < args.size(); i++) {
	                    if (Parametros.get(name.image).size() > i) {
	                        copia.setAtributos(Parametros.get(name.image).get(i), args.get(i));
	                    }
	                }
	                copia.execute();
	            }
	            salida = "Procedure " + name.image + " executed (alt syntax).";
	        } else {
	            throw new Error("Procedure not defined: " + name.image);
	        }
	    }
	}

    void JumpInstr() : { Token t1, t2; int x; }
    {
        <JUMP> t1=Param()
        ( <TOTHE> t2=DirectionComponent() { x=Integer.parseInt(t1.image); world.moveForward(x,false); salida="Jump to the "+t2.image; }
        | <INDIR> t2=Orientation() { x=Integer.parseInt(t1.image); world.moveForward(x,false); salida="Jump in direction "+t2.image; } )
        <DOT>
    }

    void MoveInstr() : { Token t1, t2; int x; }
    {
        <MOVE> t1=Param()
        ( <TOTHE> t2=DirectionComponent() { x=Integer.parseInt(t1.image); world.moveForward(x,false); salida="Move to the "+t2.image; }
        | <INDIR> t2=Orientation() { x=Integer.parseInt(t1.image); world.moveForward(x,false); salida="Move in direction "+t2.image; }
        | { x=Integer.parseInt(t1.image); world.moveForward(x,false); salida="Move forward "+x; })
        <DOT>
    }

    void TurnInstr() : { Token dir; }
    {
        <TURN> <COLON> dir=Direction() { world.turnRight(); salida="Turned "+dir.image; } <DOT>
    }

    void FaceInstr() : { Token dir; int d; }
    {
        <FACE> <COLON> dir=Orientation() {
            d = switch (dir.image.toLowerCase()) {
                case "#north" -> Robot.NORTH;
                case "#south" -> Robot.SOUTH;
                case "#east" -> Robot.EAST;
                case "#west" -> Robot.WEST;
                default -> -1;
            };
            while (world.getFacing() != d) world.turnRight();
            salida = "Faced to "+dir.image;
        } <DOT>
    }

    void PutInstr() : { Token t1, t2; int x; }
    {
        <PUT> <COLON> t1=Param() <OFTYPE> t2=Type()
        { x=Integer.parseInt(t1.image);
          if(t2.image.equalsIgnoreCase("#chips")) world.putChips(x);
          else world.putBalloons(x);
          salida="Put "+x+" of "+t2.image; } <DOT>
    }

    void PickInstr() : { Token t1, t2; int x; }
    {
        <PICK> <COLON> t1=Param() <OFTYPE> t2=Type()
        { x=Integer.parseInt(t1.image);
          if(t2.image.equalsIgnoreCase("#chips")) world.pickChips(x);
          else world.grabBalloons(x);
          salida="Pick "+x+" of "+t2.image; } <DOT>
    }

    void PopInstr() : { Token t1; int x; }
    {
        <POP> <COLON> t1=Param() { x=Integer.parseInt(t1.image); world.popBalloons(x); salida="Pop "+x+" balloons"; } <DOT>
    }

    void GotoInstr() : { Token t1, t2; int x, y; }
    {
        <GOTO> <COLON> t1=Param() <WITH> <COLON> t2=Param()
        { x=Integer.parseInt(t1.image); y=Integer.parseInt(t2.image); world.setPostion(x,y); salida="Goto position ("+x+", "+y+")"; } <DOT>
    }

    void AssignInstr() : { Token var, val; int x; }
    {
        var=<ID> <ASSIGN> val=Param()
        { x=Integer.parseInt(val.image); Variables.put(var.image,x); salida="Assign "+x+" to "+var.image; } <DOT>
    }

    void NopInstr() : {}
    {
        <NOP> <DOT> { salida = "Nop executed"; }
    }

    void IfInstr() : {}
    {
        <IF> Condition() <THEN> Block() <ELSE> Block() { salida="If-Else executed"; }
    }

    void WhileInstr() : {}
    {
        <WHILE> Condition() <DO> Block() { salida="While executed"; }
    }

    void RepeatInstr() : { Token times; int n; }
    {
        <FOR> times=Param() <REPEAT> Block() { n=Integer.parseInt(times.image); salida="Repeat "+n+" times executed"; }
    }

    void ProcedureDecl() : { Token name; }
    {
        <DEFPROC> name=<ID> (ProcedureParams())? Block() { salida = "Procedure "+name.image+" declared"; }
    }

    void ProcedureParams() : { Token p; }
    {
        <PIPE> ( p=<ID> )+ <PIPE>
    }

    void Block() : {}
    {
        <LBRACK> (Instruction())* <RBRACK>
    }

    void Condition() : {}
    {
        FacingCond() | CanPutCond() | CanPickCond() | CanMoveCond() | CanJumpCond() | NotCond()
    }

    void FacingCond() : { Token dir; }
    {
        <FACING> <COLON> dir=Orientation() { salida = "Condition: Facing "+dir.image; }
    }

    void CanPutCond() : { Token n, t; }
    {
        <CANPUT> <COLON> n=Param() <OFTYPE> t=Type() { salida = "Condition: CanPut "+n.image+" "+t.image; }
    }

    void CanPickCond() : { Token n, t; }
    {
        <CANPICK> <COLON> n=Param() <OFTYPE> t=Type() { salida = "Condition: CanPick "+n.image+" "+t.image; }
    }

    void CanMoveCond() : { Token n, d; }
    {
        <CANMOVE> <COLON> n=Param() ( <INDIR> d=Orientation() | <TOTHE> d=DirectionComponent() ) { salida = "Condition: CanMove "+n.image+" "+d.image; }
    }

    void CanJumpCond() : { Token n, d; }
    {
        <CANJUMP> <COLON> n=Param() ( <INDIR> d=Orientation() | <TOTHE> d=DirectionComponent() ) { salida = "Condition: CanJump "+n.image+" "+d.image; }
    }

    void NotCond() : {}
    {
        <NOT> <COLON> Condition() { salida = "Condition: Not"; }
    }

    Token Param() : { Token t; } { t=<NUM> | <ID> { return t; } }
    Token DirectionComponent() : { Token t; } { t=<DIRECTIONCOMP> { return t; } }
    Token Direction() : { Token t; } { t=<DIRECTION> { return t; } }
    Token Orientation() : { Token t; } { t=<ORIENTATION> { return t; } }
    Token Type() : { Token t; } { t=<TYPE> { return t; } }

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	
